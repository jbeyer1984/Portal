<?php

namespace Acme\PortalBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
  public function findAllOrderedByDescription()
  {
    return $this->getEntityManager()
      ->createQuery(
        'SELECT t FROM AcmePortalBundle:Article t'
//        . ' WHERE t.id in (SELECT at.id FROM AcmePortalBundle:Article at)'
        . ' ORDER BY t.client, t.pos, t.description ASC'
      )
      ->getResult();
  }

  public function findSignificantArticlesToTags($tags)
  {
    $query = $this->getEntityManager()->getRepository('AcmePortalBundle:Article')
      ->createQueryBuilder('a')
      ->join('a.tags', 't')
    ;
    $i = 0;
    $parameters = array();
    foreach ($tags as $tagName) {
      $query->orWhere('t.name LIKE ?' . $i++);
      $parameters[$i-1] = '%' . $tagName . '%';
    }
    $query->setParameters($parameters);

    return $query->getQuery()->getResult();
  }

  public function getNativeArticles()
  {
//    $rsm = new ResultSetMapping();
//    $rsm->addEntityResult(Article::class, 'a');
    $entityManager = $this->getEntityManager();

    $rsm = new ResultSetMappingBuilder($entityManager);
    $rsm->addRootEntityFromClassMetadata(Article::class, 'a');
    
    $selectClause = $rsm->generateSelectClause(array(
      'a' => 'a',
    ));
    
    $sqlQuery = '
      SELECT ' . $selectClause . '
      FROM article as a
    ';
    
    $query = $this->getEntityManager()->createNativeQuery(
      $sqlQuery,
      $rsm
    );
//    $query->setParameter('select_clause', $selectClause);
    
    $result = $query->getResult();
    
    return $result;
  }

  public function findSignificantArticlesToTagsIncludeClients($articlesToFilter = array(), $tags = array(), $clients = array())
  {
    $query = $this->getEntityManager()->getRepository('AcmePortalBundle:Article')
      ->createQueryBuilder('a')
      ->join('a.tags', 't')
      ->join('a.client', 'c')
    ;

    $filterArticles = $this->subQueryRow($articlesToFilter, 'a.description NOT LIKE', 'AND');
    $filterTags = $this->subQueryRow($tags, 't.name LIKE', 'OR');
    $filterClients = $this->subQueryRow($clients, 'c.name LIKE ', 'OR');
    $query->andWhere($filterArticles);
    $query->andWhere($filterTags.' OR '.$filterClients);
    
    $dgl = $query->getQuery()->getSQL();
    
    $merged = array_merge($articlesToFilter, $tags, $clients);
    
    $splits = explode('?', $dgl);
    $firstSplit = array_shift($splits);
    foreach($splits as $key => $split) {
      $splits[$key] = str_replace('%', "'", $merged[$key]).$split;
    }
    $wholeDgl = $firstSplit.implode($splits, '');
    $dump = print_r($wholeDgl, true);
    error_log("\n" . '-$- in ' . __FILE__ . ':' . __LINE__ . ' in ' . __METHOD__ . "\n" . '*** $wholeDgl ***' . "\n = " . $dump);
//    print_r($wholeDgl);

    return $query->getQuery()->getResult();
  }

  /**
   * @param $objectsToFilter
   * @param $queryForeach
   * @param $queryDelimiter
   * @return string
   */
  protected function subQueryRow($objectsToFilter, $queryForeach, $queryDelimiter)
  {
    $isLike = (true == preg_match('/like/i', $queryForeach));
    $object = array_shift($objectsToFilter);
    $expression = $queryForeach.$object." ";
    if ($isLike) {
      $expression = $queryForeach." '".$object."' ";
    }
    $subQueryFilterArticles = $expression;
    foreach ($objectsToFilter as $object) {
      $expression = $queryForeach." '".$object."' ";
      $subQueryFilterArticles .= " ".$queryDelimiter." ".$expression;
    }
    return $subQueryFilterArticles;
  }
}

